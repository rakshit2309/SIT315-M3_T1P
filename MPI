#include <iostream>
#include <mpi.h>

using namespace std;

void matrix_multiplication(int* A, int* B, int* result, int rows_A, int cols_A, int cols_B, int my_rank, int num_procs) {
    for (int i = my_rank; i < rows_A; i += num_procs) {
        for (int j = 0; j < cols_B; ++j) {
            result[i * cols_B + j] = 0;
            for (int k = 0; k < cols_A; ++k) {
                result[i * cols_B + j] += A[i * cols_A + k] * B[k * cols_B + j];
            }
        }
    }
}

int main(int argc, char* argv[]) {
    MPI_Init(&argc, &argv);

    int my_rank, num_procs;
    MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);
    MPI_Comm_size(MPI_COMM_WORLD, &num_procs);

    if (num_procs < 2) {
        cout << "This program requires at least 2 processes." << endl;
        MPI_Finalize();
        return 1;
    }

    // Example matrices A and B
    const int rows_A = 3;
    const int cols_A = 3;
    const int cols_B = 3;
    int A[rows_A * cols_A] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    int B[cols_A * cols_B] = {9, 8, 7, 6, 5, 4, 3, 2, 1};
    int result[rows_A * cols_B];

    // Perform matrix multiplication
    matrix_multiplication(A, B, result, rows_A, cols_A, cols_B, my_rank, num_procs);

    // Gather all partial results from all processes
    MPI_Reduce(MPI_IN_PLACE, result, rows_A * cols_B, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    // Display the result in process 0
    if (my_rank == 0) {
        cout << "Result of matrix multiplication:" << endl;
        for (int i = 0; i < rows_A; ++i) {
            for (int j = 0; j < cols_B; ++j) {
                cout << result[i * cols_B + j] << " ";
            }
            cout << endl;
        }
    }

    MPI_Finalize();
    return 0;
}
